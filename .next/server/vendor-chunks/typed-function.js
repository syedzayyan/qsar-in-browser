"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/typed-function";
exports.ids = ["vendor-chunks/typed-function"];
exports.modules = {

/***/ "(ssr)/./node_modules/typed-function/lib/esm/typed-function.mjs":
/*!****************************************************************!*\
  !*** ./node_modules/typed-function/lib/esm/typed-function.mjs ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nfunction ok() {\n  return true;\n}\n\nfunction notOk() {\n  return false;\n}\n\nfunction undef() {\n  return undefined;\n}\n\nconst NOT_TYPED_FUNCTION = 'Argument is not a typed-function.';\n/**\n * @typedef {{\n *   params: Param[],\n *   fn: function,\n *   test: function,\n *   implementation: function\n * }} Signature\n *\n * @typedef {{\n *   types: Type[],\n *   hasAny: boolean,\n *   hasConversion: boolean,\n *   restParam: boolean\n * }} Param\n *\n * @typedef {{\n *   name: string,\n *   typeIndex: number,\n *   test: function,\n *   isAny: boolean,\n *   conversion?: ConversionDef,\n *   conversionIndex: number,\n * }} Type\n *\n * @typedef {{\n *   from: string,\n *   to: string,\n *   convert: function (*) : *\n * }} ConversionDef\n *\n * @typedef {{\n *   name: string,\n *   test: function(*) : boolean,\n *   isAny?: boolean\n * }} TypeDef\n */\n\n/**\n * @returns {() => function}\n */\n\nfunction create() {\n  // data type tests\n\n  /**\n   * Returns true if the argument is a non-null \"plain\" object\n   */\n  function isPlainObject(x) {\n    return typeof x === 'object' && x !== null && x.constructor === Object;\n  }\n\n  const _types = [{\n    name: 'number',\n    test: function (x) {\n      return typeof x === 'number';\n    }\n  }, {\n    name: 'string',\n    test: function (x) {\n      return typeof x === 'string';\n    }\n  }, {\n    name: 'boolean',\n    test: function (x) {\n      return typeof x === 'boolean';\n    }\n  }, {\n    name: 'Function',\n    test: function (x) {\n      return typeof x === 'function';\n    }\n  }, {\n    name: 'Array',\n    test: Array.isArray\n  }, {\n    name: 'Date',\n    test: function (x) {\n      return x instanceof Date;\n    }\n  }, {\n    name: 'RegExp',\n    test: function (x) {\n      return x instanceof RegExp;\n    }\n  }, {\n    name: 'Object',\n    test: isPlainObject\n  }, {\n    name: 'null',\n    test: function (x) {\n      return x === null;\n    }\n  }, {\n    name: 'undefined',\n    test: function (x) {\n      return x === undefined;\n    }\n  }];\n  const anyType = {\n    name: 'any',\n    test: ok,\n    isAny: true\n  }; // Data structures to track the types. As these are local variables in\n  // create(), each typed universe will get its own copy, but the variables\n  // will only be accessible through the (closures of the) functions supplied\n  // as properties of the typed object, not directly.\n  // These will be initialized in clear() below\n\n  let typeMap; // primary store of all types\n\n  let typeList; // Array of just type names, for the sake of ordering\n  // And similar data structures for the type conversions:\n\n  let nConversions = 0; // the actual conversions are stored on a property of the destination types\n  // This is a temporary object, will be replaced with a function at the end\n\n  let typed = {\n    createCount: 0\n  };\n  /**\n   * Takes a type name and returns the corresponding official type object\n   * for that type.\n   *\n   * @param {string} typeName\n   * @returns {TypeDef} type\n   */\n\n  function findType(typeName) {\n    const type = typeMap.get(typeName);\n\n    if (type) {\n      return type;\n    } // Remainder is error handling\n\n\n    let message = 'Unknown type \"' + typeName + '\"';\n    const name = typeName.toLowerCase();\n    let otherName;\n\n    for (otherName of typeList) {\n      if (otherName.toLowerCase() === name) {\n        message += '. Did you mean \"' + otherName + '\" ?';\n        break;\n      }\n    }\n\n    throw new TypeError(message);\n  }\n  /**\n   * Adds an array `types` of type definitions to this typed instance.\n   * Each type definition should be an object with properties:\n   * 'name' - a string giving the name of the type; 'test' - function\n   * returning a boolean that tests membership in the type; and optionally\n   * 'isAny' - true only for the 'any' type.\n   *\n   * The second optional argument, `before`, gives the name of a type that\n   * these types should be added before. The new types are added in the\n   * order specified.\n   * @param {TypeDef[]} types\n   * @param {string | boolean} [beforeSpec='any'] before\n   */\n\n\n  function addTypes(types) {\n    let beforeSpec = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'any';\n    const beforeIndex = beforeSpec ? findType(beforeSpec).index : typeList.length;\n    const newTypes = [];\n\n    for (let i = 0; i < types.length; ++i) {\n      if (!types[i] || typeof types[i].name !== 'string' || typeof types[i].test !== 'function') {\n        throw new TypeError('Object with properties {name: string, test: function} expected');\n      }\n\n      const typeName = types[i].name;\n\n      if (typeMap.has(typeName)) {\n        throw new TypeError('Duplicate type name \"' + typeName + '\"');\n      }\n\n      newTypes.push(typeName);\n      typeMap.set(typeName, {\n        name: typeName,\n        test: types[i].test,\n        isAny: types[i].isAny,\n        index: beforeIndex + i,\n        conversionsTo: [] // Newly added type can't have any conversions to it\n\n      });\n    } // update the typeList\n\n\n    const affectedTypes = typeList.slice(beforeIndex);\n    typeList = typeList.slice(0, beforeIndex).concat(newTypes).concat(affectedTypes); // Fix the indices\n\n    for (let i = beforeIndex + newTypes.length; i < typeList.length; ++i) {\n      typeMap.get(typeList[i]).index = i;\n    }\n  }\n  /**\n   * Removes all types and conversions from this typed instance.\n   * May cause previously constructed typed-functions to throw\n   * strange errors when they are called with types that do not\n   * match any of their signatures.\n   */\n\n\n  function clear() {\n    typeMap = new Map();\n    typeList = [];\n    nConversions = 0;\n    addTypes([anyType], false);\n  } // initialize the types to the default list\n\n\n  clear();\n  addTypes(_types);\n  /**\n   * Removes all conversions, leaving the types alone.\n   */\n\n  function clearConversions() {\n    let typeName;\n\n    for (typeName of typeList) {\n      typeMap.get(typeName).conversionsTo = [];\n    }\n\n    nConversions = 0;\n  }\n  /**\n   * Find the type names that match a value.\n   * @param {*} value\n   * @return {string[]} Array of names of types for which\n   *                  the type test matches the value.\n   */\n\n\n  function findTypeNames(value) {\n    const matches = typeList.filter(name => {\n      const type = typeMap.get(name);\n      return !type.isAny && type.test(value);\n    });\n\n    if (matches.length) {\n      return matches;\n    }\n\n    return ['any'];\n  }\n  /**\n   * Check if an entity is a typed function created by any instance\n   * @param {any} entity\n   * @returns {boolean}\n   */\n\n\n  function isTypedFunction(entity) {\n    return entity && typeof entity === 'function' && '_typedFunctionData' in entity;\n  }\n  /**\n   * Find a specific signature from a (composed) typed function, for example:\n   *\n   *   typed.findSignature(fn, ['number', 'string'])\n   *   typed.findSignature(fn, 'number, string')\n   *   typed.findSignature(fn, 'number,string', {exact: true})\n   *\n   * This function findSignature will by default return the best match to\n   * the given signature, possibly employing type conversions.\n   *\n   * The (optional) third argument is a plain object giving options\n   * controlling the signature search. Currently the only implemented\n   * option is `exact`: if specified as true (default is false), only\n   * exact matches will be returned (i.e. signatures for which `fn` was\n   * directly defined). Note that a (possibly different) type matching\n   * `any`, or one or more instances of TYPE matching `...TYPE` are\n   * considered exact matches in this regard, as no conversions are used.\n   *\n   * This function returns a \"signature\" object, as does `typed.resolve()`,\n   * which is a plain object with four keys: `params` (the array of parameters\n   * for this signature), `fn` (the originally supplied function for this\n   * signature), `test` (a generated function that determines if an argument\n   * list matches this signature, and `implementation` (the function to call\n   * on a matching argument list, that performs conversions if necessary and\n   * then calls the originally supplied function).\n   *\n   * @param {Function} fn                   A typed-function\n   * @param {string | string[]} signature\n   *     Signature to be found, can be an array or a comma separated string.\n   * @param {object} options  Controls the signature search as documented\n   * @return {{ params: Param[], fn: function, test: function, implementation: function }}\n   *     Returns the matching signature, or throws an error when no signature\n   *     is found.\n   */\n\n\n  function findSignature(fn, signature, options) {\n    if (!isTypedFunction(fn)) {\n      throw new TypeError(NOT_TYPED_FUNCTION);\n    } // Canonicalize input\n\n\n    const exact = options && options.exact;\n    const stringSignature = Array.isArray(signature) ? signature.join(',') : signature;\n    const params = parseSignature(stringSignature);\n    const canonicalSignature = stringifyParams(params); // First hope we get lucky and exactly match a signature\n\n    if (!exact || canonicalSignature in fn.signatures) {\n      // OK, we can check the internal signatures\n      const match = fn._typedFunctionData.signatureMap.get(canonicalSignature);\n\n      if (match) {\n        return match;\n      }\n    } // Oh well, we did not; so we have to go back and check the parameters\n    // one by one, in order to catch things like `any` and rest params.\n    // Note here we can assume there is at least one parameter, because\n    // the empty signature would have matched successfully above.\n\n\n    const nParams = params.length;\n    let remainingSignatures;\n\n    if (exact) {\n      remainingSignatures = [];\n      let name;\n\n      for (name in fn.signatures) {\n        remainingSignatures.push(fn._typedFunctionData.signatureMap.get(name));\n      }\n    } else {\n      remainingSignatures = fn._typedFunctionData.signatures;\n    }\n\n    for (let i = 0; i < nParams; ++i) {\n      const want = params[i];\n      const filteredSignatures = [];\n      let possibility;\n\n      for (possibility of remainingSignatures) {\n        const have = getParamAtIndex(possibility.params, i);\n\n        if (!have || want.restParam && !have.restParam) {\n          continue;\n        }\n\n        if (!have.hasAny) {\n          // have to check all of the wanted types are available\n          const haveTypes = paramTypeSet(have);\n\n          if (want.types.some(wtype => !haveTypes.has(wtype.name))) {\n            continue;\n          }\n        } // OK, this looks good\n\n\n        filteredSignatures.push(possibility);\n      }\n\n      remainingSignatures = filteredSignatures;\n      if (remainingSignatures.length === 0) break;\n    } // Return the first remaining signature that was totally matched:\n\n\n    let candidate;\n\n    for (candidate of remainingSignatures) {\n      if (candidate.params.length <= nParams) {\n        return candidate;\n      }\n    }\n\n    throw new TypeError('Signature not found (signature: ' + (fn.name || 'unnamed') + '(' + stringifyParams(params, ', ') + '))');\n  }\n  /**\n   * Find the proper function to call for a specific signature from\n   * a (composed) typed function, for example:\n   *\n   *   typed.find(fn, ['number', 'string'])\n   *   typed.find(fn, 'number, string')\n   *   typed.find(fn, 'number,string', {exact: true})\n   *\n   * This function find will by default return the best match to\n   * the given signature, possibly employing type conversions (and returning\n   * a function that will perform those conversions as needed). The\n   * (optional) third argument is a plain object giving options contolling\n   * the signature search. Currently only the option `exact` is implemented,\n   * which defaults to \"false\". If `exact` is specified as true, then only\n   * exact matches will be returned (i.e. signatures for which `fn` was\n   * directly defined). Uses of `any` and `...TYPE` are considered exact if\n   * no conversions are necessary to apply the corresponding function.\n   *\n   * @param {Function} fn                   A typed-function\n   * @param {string | string[]} signature\n   *     Signature to be found, can be an array or a comma separated string.\n   * @param {object} options  Controls the signature match as documented\n   * @return {function}\n   *     Returns the function to call for the given signature, or throws an\n   *     error if no match is found.\n   */\n\n\n  function find(fn, signature, options) {\n    return findSignature(fn, signature, options).implementation;\n  }\n  /**\n   * Convert a given value to another data type, specified by type name.\n   *\n   * @param {*} value\n   * @param {string} typeName\n   */\n\n\n  function convert(value, typeName) {\n    // check conversion is needed\n    const type = findType(typeName);\n\n    if (type.test(value)) {\n      return value;\n    }\n\n    const conversions = type.conversionsTo;\n\n    if (conversions.length === 0) {\n      throw new Error('There are no conversions to ' + typeName + ' defined.');\n    }\n\n    for (let i = 0; i < conversions.length; i++) {\n      const fromType = findType(conversions[i].from);\n\n      if (fromType.test(value)) {\n        return conversions[i].convert(value);\n      }\n    }\n\n    throw new Error('Cannot convert ' + value + ' to ' + typeName);\n  }\n  /**\n   * Stringify parameters in a normalized way\n   * @param {Param[]} params\n   * @param {string} [','] separator\n   * @return {string}\n   */\n\n\n  function stringifyParams(params) {\n    let separator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ',';\n    return params.map(p => p.name).join(separator);\n  }\n  /**\n   * Parse a parameter, like \"...number | boolean\"\n   * @param {string} param\n   * @return {Param} param\n   */\n\n\n  function parseParam(param) {\n    const restParam = param.indexOf('...') === 0;\n    const types = !restParam ? param : param.length > 3 ? param.slice(3) : 'any';\n    const typeDefs = types.split('|').map(s => findType(s.trim()));\n    let hasAny = false;\n    let paramName = restParam ? '...' : '';\n    const exactTypes = typeDefs.map(function (type) {\n      hasAny = type.isAny || hasAny;\n      paramName += type.name + '|';\n      return {\n        name: type.name,\n        typeIndex: type.index,\n        test: type.test,\n        isAny: type.isAny,\n        conversion: null,\n        conversionIndex: -1\n      };\n    });\n    return {\n      types: exactTypes,\n      name: paramName.slice(0, -1),\n      // remove trailing '|' from above\n      hasAny,\n      hasConversion: false,\n      restParam\n    };\n  }\n  /**\n   * Expands a parsed parameter with the types available from currently\n   * defined conversions.\n   * @param {Param} param\n   * @return {Param} param\n   */\n\n\n  function expandParam(param) {\n    const typeNames = param.types.map(t => t.name);\n    const matchingConversions = availableConversions(typeNames);\n    let hasAny = param.hasAny;\n    let newName = param.name;\n    const convertibleTypes = matchingConversions.map(function (conversion) {\n      const type = findType(conversion.from);\n      hasAny = type.isAny || hasAny;\n      newName += '|' + conversion.from;\n      return {\n        name: conversion.from,\n        typeIndex: type.index,\n        test: type.test,\n        isAny: type.isAny,\n        conversion,\n        conversionIndex: conversion.index\n      };\n    });\n    return {\n      types: param.types.concat(convertibleTypes),\n      name: newName,\n      hasAny,\n      hasConversion: convertibleTypes.length > 0,\n      restParam: param.restParam\n    };\n  }\n  /**\n   * Return the set of type names in a parameter.\n   * Caches the result for efficiency\n   *\n   * @param {Param} param\n   * @return {Set<string>} typenames\n   */\n\n\n  function paramTypeSet(param) {\n    if (!param.typeSet) {\n      param.typeSet = new Set();\n      param.types.forEach(type => param.typeSet.add(type.name));\n    }\n\n    return param.typeSet;\n  }\n  /**\n   * Parse a signature with comma separated parameters,\n   * like \"number | boolean, ...string\"\n   *\n   * @param {string} signature\n   * @return {Param[]} params\n   */\n\n\n  function parseSignature(rawSignature) {\n    const params = [];\n\n    if (typeof rawSignature !== 'string') {\n      throw new TypeError('Signatures must be strings');\n    }\n\n    const signature = rawSignature.trim();\n\n    if (signature === '') {\n      return params;\n    }\n\n    const rawParams = signature.split(',');\n\n    for (let i = 0; i < rawParams.length; ++i) {\n      const parsedParam = parseParam(rawParams[i].trim());\n\n      if (parsedParam.restParam && i !== rawParams.length - 1) {\n        throw new SyntaxError('Unexpected rest parameter \"' + rawParams[i] + '\": ' + 'only allowed for the last parameter');\n      } // if invalid, short-circuit (all the types may have been filtered)\n\n\n      if (parsedParam.types.length === 0) {\n        return null;\n      }\n\n      params.push(parsedParam);\n    }\n\n    return params;\n  }\n  /**\n   * Test whether a set of params contains a restParam\n   * @param {Param[]} params\n   * @return {boolean} Returns true when the last parameter is a restParam\n   */\n\n\n  function hasRestParam(params) {\n    const param = last(params);\n    return param ? param.restParam : false;\n  }\n  /**\n   * Create a type test for a single parameter, which can have one or multiple\n   * types.\n   * @param {Param} param\n   * @return {function(x: *) : boolean} Returns a test function\n   */\n\n\n  function compileTest(param) {\n    if (!param || param.types.length === 0) {\n      // nothing to do\n      return ok;\n    } else if (param.types.length === 1) {\n      return findType(param.types[0].name).test;\n    } else if (param.types.length === 2) {\n      const test0 = findType(param.types[0].name).test;\n      const test1 = findType(param.types[1].name).test;\n      return function or(x) {\n        return test0(x) || test1(x);\n      };\n    } else {\n      // param.types.length > 2\n      const tests = param.types.map(function (type) {\n        return findType(type.name).test;\n      });\n      return function or(x) {\n        for (let i = 0; i < tests.length; i++) {\n          if (tests[i](x)) {\n            return true;\n          }\n        }\n\n        return false;\n      };\n    }\n  }\n  /**\n   * Create a test for all parameters of a signature\n   * @param {Param[]} params\n   * @return {function(args: Array<*>) : boolean}\n   */\n\n\n  function compileTests(params) {\n    let tests, test0, test1;\n\n    if (hasRestParam(params)) {\n      // variable arguments like '...number'\n      tests = initial(params).map(compileTest);\n      const varIndex = tests.length;\n      const lastTest = compileTest(last(params));\n\n      const testRestParam = function (args) {\n        for (let i = varIndex; i < args.length; i++) {\n          if (!lastTest(args[i])) {\n            return false;\n          }\n        }\n\n        return true;\n      };\n\n      return function testArgs(args) {\n        for (let i = 0; i < tests.length; i++) {\n          if (!tests[i](args[i])) {\n            return false;\n          }\n        }\n\n        return testRestParam(args) && args.length >= varIndex + 1;\n      };\n    } else {\n      // no variable arguments\n      if (params.length === 0) {\n        return function testArgs(args) {\n          return args.length === 0;\n        };\n      } else if (params.length === 1) {\n        test0 = compileTest(params[0]);\n        return function testArgs(args) {\n          return test0(args[0]) && args.length === 1;\n        };\n      } else if (params.length === 2) {\n        test0 = compileTest(params[0]);\n        test1 = compileTest(params[1]);\n        return function testArgs(args) {\n          return test0(args[0]) && test1(args[1]) && args.length === 2;\n        };\n      } else {\n        // arguments.length > 2\n        tests = params.map(compileTest);\n        return function testArgs(args) {\n          for (let i = 0; i < tests.length; i++) {\n            if (!tests[i](args[i])) {\n              return false;\n            }\n          }\n\n          return args.length === tests.length;\n        };\n      }\n    }\n  }\n  /**\n   * Find the parameter at a specific index of a Params list.\n   * Handles rest parameters.\n   * @param {Param[]} params\n   * @param {number} index\n   * @return {Param | null} Returns the matching parameter when found,\n   *                        null otherwise.\n   */\n\n\n  function getParamAtIndex(params, index) {\n    return index < params.length ? params[index] : hasRestParam(params) ? last(params) : null;\n  }\n  /**\n   * Get all type names of a parameter\n   * @param {Params[]} params\n   * @param {number} index\n   * @return {string[]} Returns an array with type names\n   */\n\n\n  function getTypeSetAtIndex(params, index) {\n    const param = getParamAtIndex(params, index);\n\n    if (!param) {\n      return new Set();\n    }\n\n    return paramTypeSet(param);\n  }\n  /**\n   * Test whether a type is an exact type or conversion\n   * @param {Type} type\n   * @return {boolean} Returns true when\n   */\n\n\n  function isExactType(type) {\n    return type.conversion === null || type.conversion === undefined;\n  }\n  /**\n   * Helper function for creating error messages: create an array with\n   * all available types on a specific argument index.\n   * @param {Signature[]} signatures\n   * @param {number} index\n   * @return {string[]} Returns an array with available types\n   */\n\n\n  function mergeExpectedParams(signatures, index) {\n    const typeSet = new Set();\n    signatures.forEach(signature => {\n      const paramSet = getTypeSetAtIndex(signature.params, index);\n      let name;\n\n      for (name of paramSet) {\n        typeSet.add(name);\n      }\n    });\n    return typeSet.has('any') ? ['any'] : Array.from(typeSet);\n  }\n  /**\n   * Create\n   * @param {string} name             The name of the function\n   * @param {array.<*>} args          The actual arguments passed to the function\n   * @param {Signature[]} signatures  A list with available signatures\n   * @return {TypeError} Returns a type error with additional data\n   *                     attached to it in the property `data`\n   */\n\n\n  function createError(name, args, signatures) {\n    let err, expected;\n\n    const _name = name || 'unnamed'; // test for wrong type at some index\n\n\n    let matchingSignatures = signatures;\n    let index;\n\n    for (index = 0; index < args.length; index++) {\n      const nextMatchingDefs = [];\n      matchingSignatures.forEach(signature => {\n        const param = getParamAtIndex(signature.params, index);\n        const test = compileTest(param);\n\n        if ((index < signature.params.length || hasRestParam(signature.params)) && test(args[index])) {\n          nextMatchingDefs.push(signature);\n        }\n      });\n\n      if (nextMatchingDefs.length === 0) {\n        // no matching signatures anymore, throw error \"wrong type\"\n        expected = mergeExpectedParams(matchingSignatures, index);\n\n        if (expected.length > 0) {\n          const actualTypes = findTypeNames(args[index]);\n          err = new TypeError('Unexpected type of argument in function ' + _name + ' (expected: ' + expected.join(' or ') + ', actual: ' + actualTypes.join(' | ') + ', index: ' + index + ')');\n          err.data = {\n            category: 'wrongType',\n            fn: _name,\n            index,\n            actual: actualTypes,\n            expected\n          };\n          return err;\n        }\n      } else {\n        matchingSignatures = nextMatchingDefs;\n      }\n    } // test for too few arguments\n\n\n    const lengths = matchingSignatures.map(function (signature) {\n      return hasRestParam(signature.params) ? Infinity : signature.params.length;\n    });\n\n    if (args.length < Math.min.apply(null, lengths)) {\n      expected = mergeExpectedParams(matchingSignatures, index);\n      err = new TypeError('Too few arguments in function ' + _name + ' (expected: ' + expected.join(' or ') + ', index: ' + args.length + ')');\n      err.data = {\n        category: 'tooFewArgs',\n        fn: _name,\n        index: args.length,\n        expected\n      };\n      return err;\n    } // test for too many arguments\n\n\n    const maxLength = Math.max.apply(null, lengths);\n\n    if (args.length > maxLength) {\n      err = new TypeError('Too many arguments in function ' + _name + ' (expected: ' + maxLength + ', actual: ' + args.length + ')');\n      err.data = {\n        category: 'tooManyArgs',\n        fn: _name,\n        index: args.length,\n        expectedLength: maxLength\n      };\n      return err;\n    } // Generic error\n\n\n    const argTypes = [];\n\n    for (let i = 0; i < args.length; ++i) {\n      argTypes.push(findTypeNames(args[i]).join('|'));\n    }\n\n    err = new TypeError('Arguments of type \"' + argTypes.join(', ') + '\" do not match any of the defined signatures of function ' + _name + '.');\n    err.data = {\n      category: 'mismatch',\n      actual: argTypes\n    };\n    return err;\n  }\n  /**\n   * Find the lowest index of all exact types of a parameter (no conversions)\n   * @param {Param} param\n   * @return {number} Returns the index of the lowest type in typed.types\n   */\n\n\n  function getLowestTypeIndex(param) {\n    let min = typeList.length + 1;\n\n    for (let i = 0; i < param.types.length; i++) {\n      if (isExactType(param.types[i])) {\n        min = Math.min(min, param.types[i].typeIndex);\n      }\n    }\n\n    return min;\n  }\n  /**\n   * Find the lowest index of the conversion of all types of the parameter\n   * having a conversion\n   * @param {Param} param\n   * @return {number} Returns the lowest index of the conversions of this type\n   */\n\n\n  function getLowestConversionIndex(param) {\n    let min = nConversions + 1;\n\n    for (let i = 0; i < param.types.length; i++) {\n      if (!isExactType(param.types[i])) {\n        min = Math.min(min, param.types[i].conversionIndex);\n      }\n    }\n\n    return min;\n  }\n  /**\n   * Compare two params\n   * @param {Param} param1\n   * @param {Param} param2\n   * @return {number} returns -1 when param1 must get a lower\n   *                  index than param2, 1 when the opposite,\n   *                  or zero when both are equal\n   */\n\n\n  function compareParams(param1, param2) {\n    // We compare a number of metrics on a param in turn:\n    // 1) 'any' parameters are the least preferred\n    if (param1.hasAny) {\n      if (!param2.hasAny) {\n        return 1;\n      }\n    } else if (param2.hasAny) {\n      return -1;\n    } // 2) Prefer non-rest to rest parameters\n\n\n    if (param1.restParam) {\n      if (!param2.restParam) {\n        return 1;\n      }\n    } else if (param2.restParam) {\n      return -1;\n    } // 3) Prefer exact type match to conversions\n\n\n    if (param1.hasConversion) {\n      if (!param2.hasConversion) {\n        return 1;\n      }\n    } else if (param2.hasConversion) {\n      return -1;\n    } // 4) Prefer lower type index:\n\n\n    const typeDiff = getLowestTypeIndex(param1) - getLowestTypeIndex(param2);\n\n    if (typeDiff < 0) {\n      return -1;\n    }\n\n    if (typeDiff > 0) {\n      return 1;\n    } // 5) Prefer lower conversion index\n\n\n    const convDiff = getLowestConversionIndex(param1) - getLowestConversionIndex(param2);\n\n    if (convDiff < 0) {\n      return -1;\n    }\n\n    if (convDiff > 0) {\n      return 1;\n    } // Don't have a basis for preference\n\n\n    return 0;\n  }\n  /**\n   * Compare two signatures\n   * @param {Signature} signature1\n   * @param {Signature} signature2\n   * @return {number} returns a negative number when param1 must get a lower\n   *                  index than param2, a positive number when the opposite,\n   *                  or zero when both are equal\n   */\n\n\n  function compareSignatures(signature1, signature2) {\n    const pars1 = signature1.params;\n    const pars2 = signature2.params;\n    const last1 = last(pars1);\n    const last2 = last(pars2);\n    const hasRest1 = hasRestParam(pars1);\n    const hasRest2 = hasRestParam(pars2); // We compare a number of metrics on signatures in turn:\n    // 1) An \"any rest param\" is least preferred\n\n    if (hasRest1 && last1.hasAny) {\n      if (!hasRest2 || !last2.hasAny) {\n        return 1;\n      }\n    } else if (hasRest2 && last2.hasAny) {\n      return -1;\n    } // 2) Minimize the number of 'any' parameters\n\n\n    let any1 = 0;\n    let conv1 = 0;\n    let par;\n\n    for (par of pars1) {\n      if (par.hasAny) ++any1;\n      if (par.hasConversion) ++conv1;\n    }\n\n    let any2 = 0;\n    let conv2 = 0;\n\n    for (par of pars2) {\n      if (par.hasAny) ++any2;\n      if (par.hasConversion) ++conv2;\n    }\n\n    if (any1 !== any2) {\n      return any1 - any2;\n    } // 3) A conversion rest param is less preferred\n\n\n    if (hasRest1 && last1.hasConversion) {\n      if (!hasRest2 || !last2.hasConversion) {\n        return 1;\n      }\n    } else if (hasRest2 && last2.hasConversion) {\n      return -1;\n    } // 4) Minimize the number of conversions\n\n\n    if (conv1 !== conv2) {\n      return conv1 - conv2;\n    } // 5) Prefer no rest param\n\n\n    if (hasRest1) {\n      if (!hasRest2) {\n        return 1;\n      }\n    } else if (hasRest2) {\n      return -1;\n    } // 6) Prefer shorter with rest param, longer without\n\n\n    const lengthCriterion = (pars1.length - pars2.length) * (hasRest1 ? -1 : 1);\n\n    if (lengthCriterion !== 0) {\n      return lengthCriterion;\n    } // Signatures are identical in each of the above metrics.\n    // In particular, they are the same length.\n    // We can therefore compare the parameters one by one.\n    // First we count which signature has more preferred parameters.\n\n\n    const comparisons = [];\n    let tc = 0;\n\n    for (let i = 0; i < pars1.length; ++i) {\n      const thisComparison = compareParams(pars1[i], pars2[i]);\n      comparisons.push(thisComparison);\n      tc += thisComparison;\n    }\n\n    if (tc !== 0) {\n      return tc;\n    } // They have the same number of preferred parameters, so go by the\n    // earliest parameter in which we have a preference.\n    // In other words, dispatch is driven somewhat more by earlier\n    // parameters than later ones.\n\n\n    let c;\n\n    for (c of comparisons) {\n      if (c !== 0) {\n        return c;\n      }\n    } // It's a tossup:\n\n\n    return 0;\n  }\n  /**\n   * Produce a list of all conversions from distinct types to one of\n   * the given types.\n   *\n   * @param {string[]} typeNames\n   * @return {ConversionDef[]} Returns the conversions that are available\n   *                        resulting in any given type (if any)\n   */\n\n\n  function availableConversions(typeNames) {\n    if (typeNames.length === 0) {\n      return [];\n    }\n\n    const types = typeNames.map(findType);\n\n    if (typeNames.length > 1) {\n      types.sort((t1, t2) => t1.index - t2.index);\n    }\n\n    let matches = types[0].conversionsTo;\n\n    if (typeNames.length === 1) {\n      return matches;\n    }\n\n    matches = matches.concat([]); // shallow copy the matches\n    // Since the types are now in index order, we just want the first\n    // occurrence of any from type:\n\n    const knownTypes = new Set(typeNames);\n\n    for (let i = 1; i < types.length; ++i) {\n      let newMatch;\n\n      for (newMatch of types[i].conversionsTo) {\n        if (!knownTypes.has(newMatch.from)) {\n          matches.push(newMatch);\n          knownTypes.add(newMatch.from);\n        }\n      }\n    }\n\n    return matches;\n  }\n  /**\n   * Preprocess arguments before calling the original function:\n   * - if needed convert the parameters\n   * - in case of rest parameters, move the rest parameters into an Array\n   * @param {Param[]} params\n   * @param {function} fn\n   * @return {function} Returns a wrapped function\n   */\n\n\n  function compileArgsPreprocessing(params, fn) {\n    let fnConvert = fn; // TODO: can we make this wrapper function smarter/simpler?\n\n    if (params.some(p => p.hasConversion)) {\n      const restParam = hasRestParam(params);\n      const compiledConversions = params.map(compileArgConversion);\n\n      fnConvert = function convertArgs() {\n        const args = [];\n        const last = restParam ? arguments.length - 1 : arguments.length;\n\n        for (let i = 0; i < last; i++) {\n          args[i] = compiledConversions[i](arguments[i]);\n        }\n\n        if (restParam) {\n          args[last] = arguments[last].map(compiledConversions[last]);\n        }\n\n        return fn.apply(this, args);\n      };\n    }\n\n    let fnPreprocess = fnConvert;\n\n    if (hasRestParam(params)) {\n      const offset = params.length - 1;\n\n      fnPreprocess = function preprocessRestParams() {\n        return fnConvert.apply(this, slice(arguments, 0, offset).concat([slice(arguments, offset)]));\n      };\n    }\n\n    return fnPreprocess;\n  }\n  /**\n   * Compile conversion for a parameter to the right type\n   * @param {Param} param\n   * @return {function} Returns the wrapped function that will convert arguments\n   *\n   */\n\n\n  function compileArgConversion(param) {\n    let test0, test1, conversion0, conversion1;\n    const tests = [];\n    const conversions = [];\n    param.types.forEach(function (type) {\n      if (type.conversion) {\n        tests.push(findType(type.conversion.from).test);\n        conversions.push(type.conversion.convert);\n      }\n    }); // create optimized conversion functions depending on the number of conversions\n\n    switch (conversions.length) {\n      case 0:\n        return function convertArg(arg) {\n          return arg;\n        };\n\n      case 1:\n        test0 = tests[0];\n        conversion0 = conversions[0];\n        return function convertArg(arg) {\n          if (test0(arg)) {\n            return conversion0(arg);\n          }\n\n          return arg;\n        };\n\n      case 2:\n        test0 = tests[0];\n        test1 = tests[1];\n        conversion0 = conversions[0];\n        conversion1 = conversions[1];\n        return function convertArg(arg) {\n          if (test0(arg)) {\n            return conversion0(arg);\n          }\n\n          if (test1(arg)) {\n            return conversion1(arg);\n          }\n\n          return arg;\n        };\n\n      default:\n        return function convertArg(arg) {\n          for (let i = 0; i < conversions.length; i++) {\n            if (tests[i](arg)) {\n              return conversions[i](arg);\n            }\n          }\n\n          return arg;\n        };\n    }\n  }\n  /**\n   * Split params with union types in to separate params.\n   *\n   * For example:\n   *\n   *     splitParams([['Array', 'Object'], ['string', 'RegExp'])\n   *     // returns:\n   *     // [\n   *     //   ['Array', 'string'],\n   *     //   ['Array', 'RegExp'],\n   *     //   ['Object', 'string'],\n   *     //   ['Object', 'RegExp']\n   *     // ]\n   *\n   * @param {Param[]} params\n   * @return {Param[]}\n   */\n\n\n  function splitParams(params) {\n    function _splitParams(params, index, paramsSoFar) {\n      if (index < params.length) {\n        const param = params[index];\n        let resultingParams = [];\n\n        if (param.restParam) {\n          // split the types of a rest parameter in two:\n          // one with only exact types, and one with exact types and conversions\n          const exactTypes = param.types.filter(isExactType);\n\n          if (exactTypes.length < param.types.length) {\n            resultingParams.push({\n              types: exactTypes,\n              name: '...' + exactTypes.map(t => t.name).join('|'),\n              hasAny: exactTypes.some(t => t.isAny),\n              hasConversion: false,\n              restParam: true\n            });\n          }\n\n          resultingParams.push(param);\n        } else {\n          // split all the types of a regular parameter into one type per param\n          resultingParams = param.types.map(function (type) {\n            return {\n              types: [type],\n              name: type.name,\n              hasAny: type.isAny,\n              hasConversion: type.conversion,\n              restParam: false\n            };\n          });\n        } // recurse over the groups with types\n\n\n        return flatMap(resultingParams, function (nextParam) {\n          return _splitParams(params, index + 1, paramsSoFar.concat([nextParam]));\n        });\n      } else {\n        // we've reached the end of the parameters.\n        return [paramsSoFar];\n      }\n    }\n\n    return _splitParams(params, 0, []);\n  }\n  /**\n   * Test whether two param lists represent conflicting signatures\n   * @param {Param[]} params1\n   * @param {Param[]} params2\n   * @return {boolean} Returns true when the signatures conflict, false otherwise.\n   */\n\n\n  function conflicting(params1, params2) {\n    const ii = Math.max(params1.length, params2.length);\n\n    for (let i = 0; i < ii; i++) {\n      const typeSet1 = getTypeSetAtIndex(params1, i);\n      const typeSet2 = getTypeSetAtIndex(params2, i);\n      let overlap = false;\n      let name;\n\n      for (name of typeSet2) {\n        if (typeSet1.has(name)) {\n          overlap = true;\n          break;\n        }\n      }\n\n      if (!overlap) {\n        return false;\n      }\n    }\n\n    const len1 = params1.length;\n    const len2 = params2.length;\n    const restParam1 = hasRestParam(params1);\n    const restParam2 = hasRestParam(params2);\n    return restParam1 ? restParam2 ? len1 === len2 : len2 >= len1 : restParam2 ? len1 >= len2 : len1 === len2;\n  }\n  /**\n   * Helper function for `resolveReferences` that returns a copy of\n   * functionList wihe any prior resolutions cleared out, in case we are\n   * recycling signatures from a prior typed function construction.\n   *\n   * @param {Array.<function|typed-reference>} functionList\n   * @return {Array.<function|typed-reference>}\n   */\n\n\n  function clearResolutions(functionList) {\n    return functionList.map(fn => {\n      if (isReferToSelf(fn)) {\n        return referToSelf(fn.referToSelf.callback);\n      }\n\n      if (isReferTo(fn)) {\n        return makeReferTo(fn.referTo.references, fn.referTo.callback);\n      }\n\n      return fn;\n    });\n  }\n  /**\n   * Take a list of references, a list of functions functionList, and a\n   * signatureMap indexing signatures into functionList, and return\n   * the list of resolutions, or a false-y value if they don't all\n   * resolve in a valid way (yet).\n   *\n   * @param {string[]} references\n   * @param {Array<function|typed-reference} functionList\n   * @param {Object.<string, integer>} signatureMap\n   * @return {function[] | false} resolutions\n   */\n\n\n  function collectResolutions(references, functionList, signatureMap) {\n    const resolvedReferences = [];\n    let reference;\n\n    for (reference of references) {\n      let resolution = signatureMap[reference];\n\n      if (typeof resolution !== 'number') {\n        throw new TypeError('No definition for referenced signature \"' + reference + '\"');\n      }\n\n      resolution = functionList[resolution];\n\n      if (typeof resolution !== 'function') {\n        return false;\n      }\n\n      resolvedReferences.push(resolution);\n    }\n\n    return resolvedReferences;\n  }\n  /**\n   * Resolve any references in the functionList for the typed function\n   * itself. The signatureMap tells which index in the functionList a\n   * given signature should be mapped to (for use in resolving typed.referTo)\n   * and self provides the destions of a typed.referToSelf.\n   *\n   * @param {Array<function | typed-reference-object>} functionList\n   * @param {Object.<string, function>} signatureMap\n   * @param {function} self  The typed-function itself\n   * @return {Array<function>} The list of resolved functions\n   */\n\n\n  function resolveReferences(functionList, signatureMap, self) {\n    const resolvedFunctions = clearResolutions(functionList);\n    const isResolved = new Array(resolvedFunctions.length).fill(false);\n    let leftUnresolved = true;\n\n    while (leftUnresolved) {\n      leftUnresolved = false;\n      let nothingResolved = true;\n\n      for (let i = 0; i < resolvedFunctions.length; ++i) {\n        if (isResolved[i]) continue;\n        const fn = resolvedFunctions[i];\n\n        if (isReferToSelf(fn)) {\n          resolvedFunctions[i] = fn.referToSelf.callback(self); // Preserve reference in case signature is reused someday:\n\n          resolvedFunctions[i].referToSelf = fn.referToSelf;\n          isResolved[i] = true;\n          nothingResolved = false;\n        } else if (isReferTo(fn)) {\n          const resolvedReferences = collectResolutions(fn.referTo.references, resolvedFunctions, signatureMap);\n\n          if (resolvedReferences) {\n            resolvedFunctions[i] = fn.referTo.callback.apply(this, resolvedReferences); // Preserve reference in case signature is reused someday:\n\n            resolvedFunctions[i].referTo = fn.referTo;\n            isResolved[i] = true;\n            nothingResolved = false;\n          } else {\n            leftUnresolved = true;\n          }\n        }\n      }\n\n      if (nothingResolved && leftUnresolved) {\n        throw new SyntaxError('Circular reference detected in resolving typed.referTo');\n      }\n    }\n\n    return resolvedFunctions;\n  }\n  /**\n   * Validate whether any of the function bodies contains a self-reference\n   * usage like `this(...)` or `this.signatures`. This self-referencing is\n   * deprecated since typed-function v3. It has been replaced with\n   * the functions typed.referTo and typed.referToSelf.\n   * @param {Object.<string, function>} signaturesMap\n   */\n\n\n  function validateDeprecatedThis(signaturesMap) {\n    // TODO: remove this deprecation warning logic some day (it's introduced in v3)\n    // match occurrences like 'this(' and 'this.signatures'\n    const deprecatedThisRegex = /\\bthis(\\(|\\.signatures\\b)/;\n    Object.keys(signaturesMap).forEach(signature => {\n      const fn = signaturesMap[signature];\n\n      if (deprecatedThisRegex.test(fn.toString())) {\n        throw new SyntaxError('Using `this` to self-reference a function ' + 'is deprecated since typed-function@3. ' + 'Use typed.referTo and typed.referToSelf instead.');\n      }\n    });\n  }\n  /**\n   * Create a typed function\n   * @param {String} name               The name for the typed function\n   * @param {Object.<string, function>} rawSignaturesMap\n   *                                    An object with one or\n   *                                    multiple signatures as key, and the\n   *                                    function corresponding to the\n   *                                    signature as value.\n   * @return {function}  Returns the created typed function.\n   */\n\n\n  function createTypedFunction(name, rawSignaturesMap) {\n    typed.createCount++;\n\n    if (Object.keys(rawSignaturesMap).length === 0) {\n      throw new SyntaxError('No signatures provided');\n    }\n\n    if (typed.warnAgainstDeprecatedThis) {\n      validateDeprecatedThis(rawSignaturesMap);\n    } // Main processing loop for signatures\n\n\n    const parsedParams = [];\n    const originalFunctions = [];\n    const signaturesMap = {};\n    const preliminarySignatures = []; // may have duplicates from conversions\n\n    let signature;\n\n    for (signature in rawSignaturesMap) {\n      // A) Protect against polluted Object prototype:\n      if (!Object.prototype.hasOwnProperty.call(rawSignaturesMap, signature)) {\n        continue;\n      } // B) Parse the signature\n\n\n      const params = parseSignature(signature);\n      if (!params) continue; // C) Check for conflicts\n\n      parsedParams.forEach(function (pp) {\n        if (conflicting(pp, params)) {\n          throw new TypeError('Conflicting signatures \"' + stringifyParams(pp) + '\" and \"' + stringifyParams(params) + '\".');\n        }\n      });\n      parsedParams.push(params); // D) Store the provided function and add conversions\n\n      const functionIndex = originalFunctions.length;\n      originalFunctions.push(rawSignaturesMap[signature]);\n      const conversionParams = params.map(expandParam); // E) Split the signatures and collect them up\n\n      let sp;\n\n      for (sp of splitParams(conversionParams)) {\n        const spName = stringifyParams(sp);\n        preliminarySignatures.push({\n          params: sp,\n          name: spName,\n          fn: functionIndex\n        });\n\n        if (sp.every(p => !p.hasConversion)) {\n          signaturesMap[spName] = functionIndex;\n        }\n      }\n    }\n\n    preliminarySignatures.sort(compareSignatures); // Note the forward reference to theTypedFn\n\n    const resolvedFunctions = resolveReferences(originalFunctions, signaturesMap, theTypedFn); // Fill in the proper function for each signature\n\n    let s;\n\n    for (s in signaturesMap) {\n      if (Object.prototype.hasOwnProperty.call(signaturesMap, s)) {\n        signaturesMap[s] = resolvedFunctions[signaturesMap[s]];\n      }\n    }\n\n    const signatures = [];\n    const internalSignatureMap = new Map(); // benchmarks faster than object\n\n    for (s of preliminarySignatures) {\n      // Note it's only safe to eliminate duplicates like this\n      // _after_ the signature sorting step above; otherwise we might\n      // remove the wrong one.\n      if (!internalSignatureMap.has(s.name)) {\n        s.fn = resolvedFunctions[s.fn];\n        signatures.push(s);\n        internalSignatureMap.set(s.name, s);\n      }\n    } // we create a highly optimized checks for the first couple of signatures with max 2 arguments\n\n\n    const ok0 = signatures[0] && signatures[0].params.length <= 2 && !hasRestParam(signatures[0].params);\n    const ok1 = signatures[1] && signatures[1].params.length <= 2 && !hasRestParam(signatures[1].params);\n    const ok2 = signatures[2] && signatures[2].params.length <= 2 && !hasRestParam(signatures[2].params);\n    const ok3 = signatures[3] && signatures[3].params.length <= 2 && !hasRestParam(signatures[3].params);\n    const ok4 = signatures[4] && signatures[4].params.length <= 2 && !hasRestParam(signatures[4].params);\n    const ok5 = signatures[5] && signatures[5].params.length <= 2 && !hasRestParam(signatures[5].params);\n    const allOk = ok0 && ok1 && ok2 && ok3 && ok4 && ok5; // compile the tests\n\n    for (let i = 0; i < signatures.length; ++i) {\n      signatures[i].test = compileTests(signatures[i].params);\n    }\n\n    const test00 = ok0 ? compileTest(signatures[0].params[0]) : notOk;\n    const test10 = ok1 ? compileTest(signatures[1].params[0]) : notOk;\n    const test20 = ok2 ? compileTest(signatures[2].params[0]) : notOk;\n    const test30 = ok3 ? compileTest(signatures[3].params[0]) : notOk;\n    const test40 = ok4 ? compileTest(signatures[4].params[0]) : notOk;\n    const test50 = ok5 ? compileTest(signatures[5].params[0]) : notOk;\n    const test01 = ok0 ? compileTest(signatures[0].params[1]) : notOk;\n    const test11 = ok1 ? compileTest(signatures[1].params[1]) : notOk;\n    const test21 = ok2 ? compileTest(signatures[2].params[1]) : notOk;\n    const test31 = ok3 ? compileTest(signatures[3].params[1]) : notOk;\n    const test41 = ok4 ? compileTest(signatures[4].params[1]) : notOk;\n    const test51 = ok5 ? compileTest(signatures[5].params[1]) : notOk; // compile the functions\n\n    for (let i = 0; i < signatures.length; ++i) {\n      signatures[i].implementation = compileArgsPreprocessing(signatures[i].params, signatures[i].fn);\n    }\n\n    const fn0 = ok0 ? signatures[0].implementation : undef;\n    const fn1 = ok1 ? signatures[1].implementation : undef;\n    const fn2 = ok2 ? signatures[2].implementation : undef;\n    const fn3 = ok3 ? signatures[3].implementation : undef;\n    const fn4 = ok4 ? signatures[4].implementation : undef;\n    const fn5 = ok5 ? signatures[5].implementation : undef;\n    const len0 = ok0 ? signatures[0].params.length : -1;\n    const len1 = ok1 ? signatures[1].params.length : -1;\n    const len2 = ok2 ? signatures[2].params.length : -1;\n    const len3 = ok3 ? signatures[3].params.length : -1;\n    const len4 = ok4 ? signatures[4].params.length : -1;\n    const len5 = ok5 ? signatures[5].params.length : -1; // simple and generic, but also slow\n\n    const iStart = allOk ? 6 : 0;\n    const iEnd = signatures.length; // de-reference ahead for execution speed:\n\n    const tests = signatures.map(s => s.test);\n    const fns = signatures.map(s => s.implementation);\n\n    const generic = function generic() {\n      'use strict';\n\n      for (let i = iStart; i < iEnd; i++) {\n        if (tests[i](arguments)) {\n          return fns[i].apply(this, arguments);\n        }\n      }\n\n      return typed.onMismatch(name, arguments, signatures);\n    }; // create the typed function\n    // fast, specialized version. Falls back to the slower, generic one if needed\n\n\n    function theTypedFn(arg0, arg1) {\n      'use strict';\n\n      if (arguments.length === len0 && test00(arg0) && test01(arg1)) {\n        return fn0.apply(this, arguments);\n      }\n\n      if (arguments.length === len1 && test10(arg0) && test11(arg1)) {\n        return fn1.apply(this, arguments);\n      }\n\n      if (arguments.length === len2 && test20(arg0) && test21(arg1)) {\n        return fn2.apply(this, arguments);\n      }\n\n      if (arguments.length === len3 && test30(arg0) && test31(arg1)) {\n        return fn3.apply(this, arguments);\n      }\n\n      if (arguments.length === len4 && test40(arg0) && test41(arg1)) {\n        return fn4.apply(this, arguments);\n      }\n\n      if (arguments.length === len5 && test50(arg0) && test51(arg1)) {\n        return fn5.apply(this, arguments);\n      }\n\n      return generic.apply(this, arguments);\n    } // attach name the typed function\n\n\n    try {\n      Object.defineProperty(theTypedFn, 'name', {\n        value: name\n      });\n    } catch (err) {// old browsers do not support Object.defineProperty and some don't support setting the name property\n      // the function name is not essential for the functioning, it's mostly useful for debugging,\n      // so it's fine to have unnamed functions.\n    } // attach signatures to the function.\n    // This property is close to the original collection of signatures\n    // used to create the typed-function, just with unions split:\n\n\n    theTypedFn.signatures = signaturesMap; // Store internal data for functions like resolve, find, etc.\n    // Also serves as the flag that this is a typed-function\n\n    theTypedFn._typedFunctionData = {\n      signatures,\n      signatureMap: internalSignatureMap\n    };\n    return theTypedFn;\n  }\n  /**\n   * Action to take on mismatch\n   * @param {string} name      Name of function that was attempted to be called\n   * @param {Array} args       Actual arguments to the call\n   * @param {Array} signatures Known signatures of the named typed-function\n   */\n\n\n  function _onMismatch(name, args, signatures) {\n    throw createError(name, args, signatures);\n  }\n  /**\n   * Return all but the last items of an array or function Arguments\n   * @param {Array | Arguments} arr\n   * @return {Array}\n   */\n\n\n  function initial(arr) {\n    return slice(arr, 0, arr.length - 1);\n  }\n  /**\n   * return the last item of an array or function Arguments\n   * @param {Array | Arguments} arr\n   * @return {*}\n   */\n\n\n  function last(arr) {\n    return arr[arr.length - 1];\n  }\n  /**\n   * Slice an array or function Arguments\n   * @param {Array | Arguments | IArguments} arr\n   * @param {number} start\n   * @param {number} [end]\n   * @return {Array}\n   */\n\n\n  function slice(arr, start, end) {\n    return Array.prototype.slice.call(arr, start, end);\n  }\n  /**\n   * Return the first item from an array for which test(arr[i]) returns true\n   * @param {Array} arr\n   * @param {function} test\n   * @return {* | undefined} Returns the first matching item\n   *                         or undefined when there is no match\n   */\n\n\n  function findInArray(arr, test) {\n    for (let i = 0; i < arr.length; i++) {\n      if (test(arr[i])) {\n        return arr[i];\n      }\n    }\n\n    return undefined;\n  }\n  /**\n   * Flat map the result invoking a callback for every item in an array.\n   * https://gist.github.com/samgiles/762ee337dff48623e729\n   * @param {Array} arr\n   * @param {function} callback\n   * @return {Array}\n   */\n\n\n  function flatMap(arr, callback) {\n    return Array.prototype.concat.apply([], arr.map(callback));\n  }\n  /**\n   * Create a reference callback to one or multiple signatures\n   *\n   * Syntax:\n   *\n   *     typed.referTo(signature1, signature2, ..., function callback(fn1, fn2, ...) {\n   *       // ...\n   *     })\n   *\n   * @returns {{referTo: {references: string[], callback}}}\n   */\n\n\n  function referTo() {\n    const references = initial(arguments).map(s => stringifyParams(parseSignature(s)));\n    const callback = last(arguments);\n\n    if (typeof callback !== 'function') {\n      throw new TypeError('Callback function expected as last argument');\n    }\n\n    return makeReferTo(references, callback);\n  }\n\n  function makeReferTo(references, callback) {\n    return {\n      referTo: {\n        references,\n        callback\n      }\n    };\n  }\n  /**\n   * Create a reference callback to the typed-function itself\n   *\n   * @param {(self: function) => function} callback\n   * @returns {{referToSelf: { callback: function }}}\n   */\n\n\n  function referToSelf(callback) {\n    if (typeof callback !== 'function') {\n      throw new TypeError('Callback function expected as first argument');\n    }\n\n    return {\n      referToSelf: {\n        callback\n      }\n    };\n  }\n  /**\n   * Test whether something is a referTo object, holding a list with reference\n   * signatures and a callback.\n   *\n   * @param {Object | function} objectOrFn\n   * @returns {boolean}\n   */\n\n\n  function isReferTo(objectOrFn) {\n    return objectOrFn && typeof objectOrFn.referTo === 'object' && Array.isArray(objectOrFn.referTo.references) && typeof objectOrFn.referTo.callback === 'function';\n  }\n  /**\n   * Test whether something is a referToSelf object, holding a callback where\n   * to pass `self`.\n   *\n   * @param {Object | function} objectOrFn\n   * @returns {boolean}\n   */\n\n\n  function isReferToSelf(objectOrFn) {\n    return objectOrFn && typeof objectOrFn.referToSelf === 'object' && typeof objectOrFn.referToSelf.callback === 'function';\n  }\n  /**\n   * Check if name is (A) new, (B) a match, or (C) a mismatch; and throw\n   * an error in case (C).\n   *\n   * @param { string | undefined } nameSoFar\n   * @param { string | undefined } newName\n   * @returns { string } updated name\n   */\n\n\n  function checkName(nameSoFar, newName) {\n    if (!nameSoFar) {\n      return newName;\n    }\n\n    if (newName && newName !== nameSoFar) {\n      const err = new Error('Function names do not match (expected: ' + nameSoFar + ', actual: ' + newName + ')');\n      err.data = {\n        actual: newName,\n        expected: nameSoFar\n      };\n      throw err;\n    }\n\n    return nameSoFar;\n  }\n  /**\n   * Retrieve the implied name from an object with signature keys\n   * and function values, checking whether all value names match\n   *\n   * @param { {string: function} } obj\n   */\n\n\n  function getObjectName(obj) {\n    let name;\n\n    for (const key in obj) {\n      // Only pay attention to own properties, and only if their values\n      // are typed functions or functions with a signature property\n      if (Object.prototype.hasOwnProperty.call(obj, key) && (isTypedFunction(obj[key]) || typeof obj[key].signature === 'string')) {\n        name = checkName(name, obj[key].name);\n      }\n    }\n\n    return name;\n  }\n  /**\n   * Copy all of the signatures from the second argument into the first,\n   * which is modified by side effect, checking for conflicts\n   *\n   * @param {Object.<string, function|typed-reference>} dest\n   * @param {Object.<string, function|typed-reference>} source\n   */\n\n\n  function mergeSignatures(dest, source) {\n    let key;\n\n    for (key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        if (key in dest) {\n          if (source[key] !== dest[key]) {\n            const err = new Error('Signature \"' + key + '\" is defined twice');\n            err.data = {\n              signature: key,\n              sourceFunction: source[key],\n              destFunction: dest[key]\n            };\n            throw err;\n          } // else: both signatures point to the same function, that's fine\n\n        }\n\n        dest[key] = source[key];\n      }\n    }\n  }\n\n  const saveTyped = typed;\n  /**\n   * Originally the main function was a typed function itself, but then\n   * it might not be able to generate error messages if the client\n   * replaced the type system with different names.\n   *\n   * Main entry: typed([name], functions/objects with signatures...)\n   *\n   * Assembles and returns a new typed-function from the given items\n   * that provide signatures and implementations, each of which may be\n   * * a plain object mapping (string) signatures to implementing functions,\n   * * a previously constructed typed function, or\n   * * any other single function with a string-valued property `signature`.\n    * The name of the resulting typed-function will be given by the\n   * string-valued name argument if present, or if not, by the name\n   * of any of the arguments that have one, as long as any that do are\n   * consistent with each other. If no name is specified, the name will be\n   * an empty string.\n   *\n   * @param {string} maybeName [optional]\n   * @param {(function|object)[]} signature providers\n   * @returns {typed-function}\n   */\n\n  typed = function (maybeName) {\n    const named = typeof maybeName === 'string';\n    const start = named ? 1 : 0;\n    let name = named ? maybeName : '';\n    const allSignatures = {};\n\n    for (let i = start; i < arguments.length; ++i) {\n      const item = arguments[i];\n      let theseSignatures = {};\n      let thisName;\n\n      if (typeof item === 'function') {\n        thisName = item.name;\n\n        if (typeof item.signature === 'string') {\n          // Case 1: Ordinary function with a string 'signature' property\n          theseSignatures[item.signature] = item;\n        } else if (isTypedFunction(item)) {\n          // Case 2: Existing typed function\n          theseSignatures = item.signatures;\n        }\n      } else if (isPlainObject(item)) {\n        // Case 3: Plain object, assume keys = signatures, values = functions\n        theseSignatures = item;\n\n        if (!named) {\n          thisName = getObjectName(item);\n        }\n      }\n\n      if (Object.keys(theseSignatures).length === 0) {\n        const err = new TypeError('Argument to \\'typed\\' at index ' + i + ' is not a (typed) function, ' + 'nor an object with signatures as keys and functions as values.');\n        err.data = {\n          index: i,\n          argument: item\n        };\n        throw err;\n      }\n\n      if (!named) {\n        name = checkName(name, thisName);\n      }\n\n      mergeSignatures(allSignatures, theseSignatures);\n    }\n\n    return createTypedFunction(name || '', allSignatures);\n  };\n\n  typed.create = create;\n  typed.createCount = saveTyped.createCount;\n  typed.onMismatch = _onMismatch;\n  typed.throwMismatchError = _onMismatch;\n  typed.createError = createError;\n  typed.clear = clear;\n  typed.clearConversions = clearConversions;\n  typed.addTypes = addTypes;\n  typed._findType = findType; // For unit testing only\n\n  typed.referTo = referTo;\n  typed.referToSelf = referToSelf;\n  typed.convert = convert;\n  typed.findSignature = findSignature;\n  typed.find = find;\n  typed.isTypedFunction = isTypedFunction;\n  typed.warnAgainstDeprecatedThis = true;\n  /**\n   * add a type (convenience wrapper for typed.addTypes)\n   * @param {{name: string, test: function}} type\n   * @param {boolean} [beforeObjectTest=true]\n   *                          If true, the new test will be inserted before\n   *                          the test with name 'Object' (if any), since\n   *                          tests for Object match Array and classes too.\n   */\n\n  typed.addType = function (type, beforeObjectTest) {\n    let before = 'any';\n\n    if (beforeObjectTest !== false && typeMap.has('Object')) {\n      before = 'Object';\n    }\n\n    typed.addTypes([type], before);\n  };\n  /**\n   * Verify that the ConversionDef conversion has a valid format.\n   *\n   * @param {conversionDef} conversion\n   * @return {void}\n   * @throws {TypeError|SyntaxError}\n   */\n\n\n  function _validateConversion(conversion) {\n    if (!conversion || typeof conversion.from !== 'string' || typeof conversion.to !== 'string' || typeof conversion.convert !== 'function') {\n      throw new TypeError('Object with properties {from: string, to: string, convert: function} expected');\n    }\n\n    if (conversion.to === conversion.from) {\n      throw new SyntaxError('Illegal to define conversion from \"' + conversion.from + '\" to itself.');\n    }\n  }\n  /**\n   * Add a conversion\n   *\n   * @param {ConversionDef} conversion\n   * @returns {void}\n   * @throws {TypeError}\n   */\n\n\n  typed.addConversion = function (conversion) {\n    _validateConversion(conversion);\n\n    const to = findType(conversion.to);\n\n    if (to.conversionsTo.every(function (other) {\n      return other.from !== conversion.from;\n    })) {\n      to.conversionsTo.push({\n        from: conversion.from,\n        convert: conversion.convert,\n        index: nConversions++\n      });\n    } else {\n      throw new Error('There is already a conversion from \"' + conversion.from + '\" to \"' + to.name + '\"');\n    }\n  };\n  /**\n   * Convenience wrapper to call addConversion on each conversion in a list.\n   *\n   @param {ConversionDef[]} conversions\n   @returns {void}\n   @throws {TypeError}\n   */\n\n\n  typed.addConversions = function (conversions) {\n    conversions.forEach(typed.addConversion);\n  };\n  /**\n   * Remove the specified conversion. The format is the same as for\n   * addConversion, and the convert function must match or an error\n   * is thrown.\n   *\n   * @param {{from: string, to: string, convert: function}} conversion\n   * @returns {void}\n   * @throws {TypeError|SyntaxError|Error}\n   */\n\n\n  typed.removeConversion = function (conversion) {\n    _validateConversion(conversion);\n\n    const to = findType(conversion.to);\n    const existingConversion = findInArray(to.conversionsTo, c => c.from === conversion.from);\n\n    if (!existingConversion) {\n      throw new Error('Attempt to remove nonexistent conversion from ' + conversion.from + ' to ' + conversion.to);\n    }\n\n    if (existingConversion.convert !== conversion.convert) {\n      throw new Error('Conversion to remove does not match existing conversion');\n    }\n\n    const index = to.conversionsTo.indexOf(existingConversion);\n    to.conversionsTo.splice(index, 1);\n  };\n  /**\n   * Produce the specific signature that a typed function\n   * will execute on the given arguments. Here, a \"signature\" is an\n   * object with properties 'params', 'test', 'fn', and 'implementation'.\n   * This last property is a function that converts params as necessary\n   * and then calls 'fn'. Returns null if there is no matching signature.\n   * @param {typed-function} tf\n   * @param {any[]} argList\n   * @returns {{params: string, test: function, fn: function, implementation: function}}\n   */\n\n\n  typed.resolve = function (tf, argList) {\n    if (!isTypedFunction(tf)) {\n      throw new TypeError(NOT_TYPED_FUNCTION);\n    }\n\n    const sigs = tf._typedFunctionData.signatures;\n\n    for (let i = 0; i < sigs.length; ++i) {\n      if (sigs[i].test(argList)) {\n        return sigs[i];\n      }\n    }\n\n    return null;\n  };\n\n  return typed;\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (create());\n//# sourceMappingURL=typed-function.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/typed-function/lib/esm/typed-function.mjs\n");

/***/ })

};
;